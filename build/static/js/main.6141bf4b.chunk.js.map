{"version":3,"sources":["components/HomePage/NewestPost.js","components/HomePage/RecentPostList.js","components/Loading/index.js","components/Loading/Loading.js","components/HomePage/index.js","components/HomePage/HomePage.js","components/PostsPage/index.js","components/PostsPage/PostsPage.js","lib/api.js","lib/helpers.js","lib/validator.js","components/PostPage/index.js","components/PostPage/PostPage.js","components/App/Status.js","components/App/App.js","components/App/index.js","index.js"],"names":["NewestPost","post","className","title","timestamp","text","slice","to","_id","RecentPostList","posts","map","key","length","Loading","xmlns","version","viewBox","d","HomePage","PostsPage","API_URL","fetchServerStatus","a","fetch","data","json","error","fetchPublishedPosts","fetchPostCommentsWithId","id","postComment","method","headers","body","JSON","stringify","addTimestamps","dataArr","Array","forEach","date","moment","calendar","validateUsername","username","validateCommentText","PostPage","postId","useParams","useState","setPost","useEffect","find","p","usePost","comments","setComments","useComments","userName","setUserName","userComment","setUserComment","userNameError","setUserNameError","userCommentError","setUserCommentError","e","preventDefault","Date","console","c","onSubmit","htmlFor","type","name","value","onChange","currentTarget","Status","props","status","App","setPosts","setTimeout","sort","b","usePosts","isOnline","setIsOnline","useIsOnline","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6141bf4b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default function NewestPost({ post }) {\n  return (\n    <article className=\"NewestPost\">\n      <header>\n        <h1>\n          New: <span className=\"Italic\">{post.title}</span>\n          <p className=\"Date\">Date: {post.timestamp}</p>\n        </h1>\n      </header>\n      <section>\n        <p>{post.text.slice(0, 3000)}</p>\n      </section>\n      <footer>\n        <Link to={`/posts/${post._id}`}>\n          <span>Continue Reading</span>\n        </Link>\n      </footer>\n    </article>\n  );\n}\n\nNewestPost.propTypes = {\n  post: PropTypes.object\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function RecentPostList({ posts }) {\n  return (\n    <aside className=\"PostLists\">\n      <header>\n        <h2>Recent Posts</h2>\n      </header>\n      <section>\n        <ul>\n          {posts &&\n            posts.map((post) => (\n              <li className=\"PostListItem\" key={post._id}>\n                <Link to={`/posts/${post._id}`}>\n                  <article className=\"RecentPost\">\n                    <h3>\n                      {post.title.length > 80\n                        ? `${post.title.slice(0, 80)}...`\n                        : post.title}\n                    </h3>\n                    <p>{post.timestamp}</p>\n                  </article>\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </section>\n      <Link to=\"/posts\">View All</Link>\n    </aside>\n  );\n}\n\nRecentPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object)\n};\n","import Loading from './Loading';\nimport './Loading.css';\n\nexport default Loading;\n","import React from 'react';\n\nexport default function Loading() {\n  return (\n    <div className=\"Loading\">\n      <svg\n        className=\"Loading-img\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path d=\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\" />\n      </svg>\n    </div>\n  );\n}\n","import HomePage from './HomePage';\nimport './HomePage.css';\n\nexport default HomePage;\n","import React from 'react';\nimport NewestPost from './NewestPost';\nimport RecentPostLists from './RecentPostList';\nimport PropTypes from 'prop-types';\nimport Loading from '../Loading';\n\nexport default function HomePage({ posts }) {\n  return !posts ? (\n    <Loading />\n  ) : (\n    <div className=\"HomePage\">\n      <NewestPost post={posts[0]} />\n      <RecentPostLists posts={posts} />\n    </div>\n  );\n}\n\nHomePage.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object)\n};\n","import PostsPage from './PostsPage';\nimport './PostsPage.css';\n\nexport default PostsPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loading from '../Loading';\n\nexport default function PostsPage({ posts }) {\n  return !posts ? (\n    <Loading />\n  ) : (\n    <div className=\"PostsPage\">\n      <ul>\n        {posts.map((post) => (\n          <li className=\"PostListItem\" key={post._id}>\n            <Link to={`/posts/${post._id}`}>\n              <article>\n                <h3>\n                  {post.title.length > 200\n                    ? `${post.title.slice(0, 200)}...`\n                    : post.title}\n                </h3>\n                <p>{post.timestamp}</p>\n              </article>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nPostsPage.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object)\n};\n","// This is MY API WRAPPER for MY SERVER API CALLS\n\nconst API_URL = 'http://localhost:9000/';\n\nexport async function fetchServerStatus() {\n  try {\n    const data = await fetch(API_URL);\n    return await data.json();\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function fetchPublishedPosts() {\n  try {\n    const data = await fetch(`${API_URL}posts/published/`);\n\n    return await data.json();\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function fetchPostWithId(id) {\n  try {\n    const data = await fetch(`${API_URL}posts/${id}/`);\n\n    return await data.json();\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function fetchPostCommentsWithId(id) {\n  try {\n    const data = await fetch(`${API_URL}posts/${id}/comments/`);\n\n    return await data.json();\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function postComment(data) {\n  await fetch(`${API_URL}posts/${data.post}/comments/new/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n}\n","import moment from 'moment';\n\n// add timestamps to state array (which have date prop)\n// doesn't modify the state if it has an invalid type\nexport function addTimestamps(dataArr) {\n  if (dataArr instanceof Array) {\n    dataArr.forEach((data) => {\n      if (data.date) {\n        return (data.timestamp = moment(data.date).calendar());\n      }\n    });\n  }\n}\n\n// sort the state array by date\nexport function sortByDate(dataArr) {\n  dataArr.sort((a, b) => {\n    if (a.date > b.date) {\n      return -1;\n    }\n\n    if (a.date < b.date) {\n      return 1;\n    }\n\n    return 0;\n  });\n}\n","export function validateUsername(username) {\n  if (!username) {\n    return 'is required';\n  }\n\n  if (username.length > 15) {\n    return 'should be less than 15 characters';\n  }\n\n  return '';\n}\n\nexport function validateCommentText(text) {\n  if (!text) {\n    return 'is required';\n  }\n\n  if (text.length > 300) {\n    return 'should be less than 300 characters';\n  }\n\n  return '';\n}\n","import PostPage from './PostPage';\nimport './PostPage.css';\n\nexport default PostPage;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchPostCommentsWithId, postComment } from '../../lib/api';\nimport { addTimestamps } from '../../lib/helpers';\nimport { validateUsername, validateCommentText } from '../../lib/validator';\nimport Loading from '../Loading';\n\nexport default function PostPage({ posts }) {\n  const { postId } = useParams();\n  const post = usePost(posts, postId);\n  const comments = useComments(post, postId);\n  const [userName, setUserName] = useState(null);\n  const [userComment, setUserComment] = useState(null);\n  const [userNameError, setUserNameError] = useState('');\n  const [userCommentError, setUserCommentError] = useState('');\n\n  async function handleSubmit(e) {\n    const userNameError = validateUsername(userName);\n    const userCommentError = validateCommentText(userComment);\n\n    if (userNameError || userCommentError) {\n      e.preventDefault();\n      setUserNameError(userNameError);\n      setUserCommentError(userCommentError);\n    } else {\n      try {\n        await postComment({\n          post: postId,\n          username: userName,\n          text: userComment,\n          date: new Date()\n        });\n      } catch (error) {\n        console.error('could not submit the comment');\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (userName !== null) {\n      setUserNameError(validateUsername(userName));\n    }\n  }, [userName]);\n\n  useEffect(() => {\n    if (userComment !== null) {\n      setUserCommentError(validateCommentText(userComment));\n    }\n  }, [userComment]);\n\n  function handleUsernameChange(e) {\n    setUserName(e.currentTarget.value);\n  }\n\n  function handleUserCommentChange(e) {\n    setUserComment(e.currentTarget.value);\n  }\n\n  return !post ? (\n    <Loading />\n  ) : (\n    <article className=\"PostPage\">\n      <header>\n        <h1>\n          <span className=\"Italic\">{post.title}</span>\n          <p className=\"Date\">Posted: {post.timestamp}</p>\n        </h1>\n      </header>\n      <section className=\"PostText\">\n        <p>{post.text}</p>\n      </section>\n      <footer>\n        <section className=\"PostComments\">\n          <h2>Comments</h2>\n          {comments.length > 0 ? (\n            <ul>\n              {comments.map((c) => (\n                <li key={c._id}>\n                  <article className=\"PostComment\">\n                    <h3>{c.username}</h3>\n                    <div>\n                      <p className=\"CommentText\">{c.text}</p>\n                      <p className=\"CommentDate\">{c.timestamp}</p>\n                    </div>\n                  </article>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            'No Comments'\n          )}\n          <section className=\"CommentFormSection\">\n            <form\n              className={`CommentForm ${\n                (userNameError || userCommentError) && 'FormError'\n              }`}\n              onSubmit={handleSubmit}\n            >\n              <label htmlFor=\"username\" className={userNameError && 'Error'}>\n                Username {userNameError}\n              </label>\n              <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                value={userName || ''}\n                onChange={handleUsernameChange}\n              />\n              <label htmlFor=\"text\" className={userCommentError && 'Error'}>\n                Text {userCommentError}\n              </label>\n              <textarea\n                type=\"text\"\n                id=\"text\"\n                name=\"text\"\n                value={userComment || ''}\n                onChange={handleUserCommentChange}\n              ></textarea>\n              <button>Add Comment</button>\n            </form>\n          </section>\n        </section>\n      </footer>\n    </article>\n  );\n}\n\nPostPage.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object)\n};\n\n// get our state post by ID\nfunction usePost(posts, postId) {\n  const [post, setPost] = useState(null);\n\n  useEffect(() => {\n    const post = posts && posts.find((p) => p._id === postId);\n    if (post) {\n      setPost(post);\n    }\n  }, [postId, posts]);\n\n  return post;\n}\n\n// Fetch post comments and return the state\nfunction useComments(post, postId) {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      if (post) {\n        const comments = await fetchPostCommentsWithId(postId);\n\n        if (!comments.error) {\n          addTimestamps(comments);\n          setComments(comments);\n        } else {\n          setComments([]);\n        }\n      }\n    };\n    fetch();\n  }, [postId, post]);\n\n  return comments;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Status(props) {\n  return (\n    <p className={props.status ? 'Online' : 'Offline'}>\n      {props.status ? 'Online' : 'Offline'}\n    </p>\n  );\n}\n\nStatus.propTypes = {\n  status: PropTypes.bool\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport HomePage from '../HomePage';\nimport PostsPage from '../PostsPage';\nimport PostPage from '../PostPage';\nimport Status from './Status';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { fetchPublishedPosts, fetchServerStatus } from '../../lib/api';\nimport { addTimestamps, sortByDate } from '../../lib/helpers';\n\nfunction App() {\n  const posts = usePosts();\n  const isOnline = useIsOnline();\n\n  return (\n    <Router>\n      <header className=\"App_Header\">\n        <nav className=\"App_Nav\">\n          <ul>\n            <li>\n              <Link to=\"/\">-Blog-</Link>\n            </li>\n            <li>\n              <Link to=\"/posts\">-Posts-</Link>\n            </li>\n          </ul>\n        </nav>\n        <Status status={isOnline} />\n      </header>\n\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage posts={posts && posts.slice(0, 5)} />\n        </Route>\n        <Route path=\"/posts\" exact>\n          <PostsPage posts={posts} />\n        </Route>\n        <Route path=\"/posts/:postId\" exact>\n          <PostPage posts={posts} />\n        </Route>\n        <Route path=\"/\">\n          <HomePage posts={posts} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\n// fetch posts data and return posts state\nfunction usePosts() {\n  const [posts, setPosts] = useState(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const posts = await fetchPublishedPosts();\n\n      if (!posts.error) {\n        addTimestamps(posts);\n        sortByDate(posts);\n        setPosts(posts);\n      } else {\n        console.error('Failed to fetch the data, Try to fetch again in 5sec');\n        setTimeout(fetch, 5000);\n      }\n    };\n\n    fetch();\n  }, []);\n\n  return posts;\n}\n\n// fetch server status and return status state\nfunction useIsOnline() {\n  const [isOnline, setIsOnline] = useState(false);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const status = await fetchServerStatus();\n\n      if (!status.error) {\n        setIsOnline(true);\n      } else {\n        console.error('Failed connection to API, Try to reconnect in 10sec');\n        setIsOnline(false);\n        setTimeout(fetch, 10000);\n      }\n    };\n\n    fetch();\n  });\n\n  return isOnline;\n}\n\nexport default App;\n","import App from './App';\n// import './App.css';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}